// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import dto "github.com/joshsoftware/peerly-backend/internal/pkg/dto"
import mock "github.com/stretchr/testify/mock"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateCoreValue provides a mock function with given fields: ctx, coreValue
func (_m *Service) CreateCoreValue(ctx context.Context, coreValue dto.CreateCoreValueReq) (dto.CoreValue, error) {
	ret := _m.Called(ctx, coreValue)

	var r0 dto.CoreValue
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateCoreValueReq) dto.CoreValue); ok {
		r0 = rf(ctx, coreValue)
	} else {
		r0 = ret.Get(0).(dto.CoreValue)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateCoreValueReq) error); ok {
		r1 = rf(ctx, coreValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoreValue provides a mock function with given fields: ctx, coreValueID
func (_m *Service) GetCoreValue(ctx context.Context, coreValueID string) (dto.CoreValue, error) {
	ret := _m.Called(ctx, coreValueID)

	var r0 dto.CoreValue
	if rf, ok := ret.Get(0).(func(context.Context, string) dto.CoreValue); ok {
		r0 = rf(ctx, coreValueID)
	} else {
		r0 = ret.Get(0).(dto.CoreValue)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, coreValueID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCoreValues provides a mock function with given fields: ctx
func (_m *Service) ListCoreValues(ctx context.Context) ([]dto.CoreValue, error) {
	ret := _m.Called(ctx)

	var r0 []dto.CoreValue
	if rf, ok := ret.Get(0).(func(context.Context) []dto.CoreValue); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.CoreValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCoreValue provides a mock function with given fields: ctx, coreValueID, coreValue
func (_m *Service) UpdateCoreValue(ctx context.Context, coreValueID string, coreValue dto.UpdateQueryRequest) (dto.CoreValue, error) {
	ret := _m.Called(ctx, coreValueID, coreValue)

	var r0 dto.CoreValue
	if rf, ok := ret.Get(0).(func(context.Context, string, dto.UpdateQueryRequest) dto.CoreValue); ok {
		r0 = rf(ctx, coreValueID, coreValue)
	} else {
		r0 = ret.Get(0).(dto.CoreValue)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, dto.UpdateQueryRequest) error); ok {
		r1 = rf(ctx, coreValueID, coreValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
