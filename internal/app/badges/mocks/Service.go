// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/joshsoftware/peerly-backend/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateBadge provides a mock function with given fields: ctx, badge
func (_m *Service) CreateBadge(ctx context.Context, badge dto.Badge) (dto.Badge, error) {
	ret := _m.Called(ctx, badge)

	if len(ret) == 0 {
		panic("no return value specified for CreateBadge")
	}

	var r0 dto.Badge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Badge) (dto.Badge, error)); ok {
		return rf(ctx, badge)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.Badge) dto.Badge); ok {
		r0 = rf(ctx, badge)
	} else {
		r0 = ret.Get(0).(dto.Badge)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.Badge) error); ok {
		r1 = rf(ctx, badge)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBadge provides a mock function with given fields: ctx, badgeID
func (_m *Service) DeleteBadge(ctx context.Context, badgeID int8) error {
	ret := _m.Called(ctx, badgeID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBadge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int8) error); ok {
		r0 = rf(ctx, badgeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBadge provides a mock function with given fields: ctx, badgeID
func (_m *Service) GetBadge(ctx context.Context, badgeID int8) (dto.Badge, error) {
	ret := _m.Called(ctx, badgeID)

	if len(ret) == 0 {
		panic("no return value specified for GetBadge")
	}

	var r0 dto.Badge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int8) (dto.Badge, error)); ok {
		return rf(ctx, badgeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int8) dto.Badge); ok {
		r0 = rf(ctx, badgeID)
	} else {
		r0 = ret.Get(0).(dto.Badge)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int8) error); ok {
		r1 = rf(ctx, badgeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBadges provides a mock function with given fields: ctx
func (_m *Service) ListBadges(ctx context.Context) ([]dto.Badge, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListBadges")
	}

	var r0 []dto.Badge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]dto.Badge, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []dto.Badge); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Badge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBadge provides a mock function with given fields: ctx, badgeUpdateInfo
func (_m *Service) UpdateBadge(ctx context.Context, badgeUpdateInfo dto.Badge) (dto.Badge, error) {
	ret := _m.Called(ctx, badgeUpdateInfo)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBadge")
	}

	var r0 dto.Badge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Badge) (dto.Badge, error)); ok {
		return rf(ctx, badgeUpdateInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.Badge) dto.Badge); ok {
		r0 = rf(ctx, badgeUpdateInfo)
	} else {
		r0 = ret.Get(0).(dto.Badge)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.Badge) error); ok {
		r1 = rf(ctx, badgeUpdateInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
