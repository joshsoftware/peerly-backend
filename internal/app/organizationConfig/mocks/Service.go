// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/joshsoftware/peerly-backend/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateOrganizationConfig provides a mock function with given fields: ctx, organization
func (_m *Service) CreateOrganizationConfig(ctx context.Context, organization dto.OrganizationConfig) (dto.OrganizationConfig, error) {
	ret := _m.Called(ctx, organization)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationConfig")
	}

	var r0 dto.OrganizationConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.OrganizationConfig) (dto.OrganizationConfig, error)); ok {
		return rf(ctx, organization)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.OrganizationConfig) dto.OrganizationConfig); ok {
		r0 = rf(ctx, organization)
	} else {
		r0 = ret.Get(0).(dto.OrganizationConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.OrganizationConfig) error); ok {
		r1 = rf(ctx, organization)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationConfig provides a mock function with given fields: ctx
func (_m *Service) GetOrganizationConfig(ctx context.Context) (dto.OrganizationConfig, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationConfig")
	}

	var r0 dto.OrganizationConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (dto.OrganizationConfig, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) dto.OrganizationConfig); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(dto.OrganizationConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganizationConfig provides a mock function with given fields: ctx, organization
func (_m *Service) UpdateOrganizationConfig(ctx context.Context, organization dto.OrganizationConfig) (dto.OrganizationConfig, error) {
	ret := _m.Called(ctx, organization)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationConfig")
	}

	var r0 dto.OrganizationConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.OrganizationConfig) (dto.OrganizationConfig, error)); ok {
		return rf(ctx, organization)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.OrganizationConfig) dto.OrganizationConfig); ok {
		r0 = rf(ctx, organization)
	} else {
		r0 = ret.Get(0).(dto.OrganizationConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.OrganizationConfig) error); ok {
		r1 = rf(ctx, organization)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
