// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/joshsoftware/peerly-backend/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/joshsoftware/peerly-backend/internal/repository"
)

// BadgesStorer is an autogenerated mock type for the BadgesStorer type
type BadgesStorer struct {
	mock.Mock
}

// CreateBadge provides a mock function with given fields: ctx, tx, badge
func (_m *BadgesStorer) CreateBadge(ctx context.Context, tx repository.Transaction, badge dto.Badge) (repository.Badge, error) {
	ret := _m.Called(ctx, tx, badge)

	if len(ret) == 0 {
		panic("no return value specified for CreateBadge")
	}

	var r0 repository.Badge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, dto.Badge) (repository.Badge, error)); ok {
		return rf(ctx, tx, badge)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, dto.Badge) repository.Badge); ok {
		r0 = rf(ctx, tx, badge)
	} else {
		r0 = ret.Get(0).(repository.Badge)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.Transaction, dto.Badge) error); ok {
		r1 = rf(ctx, tx, badge)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBadge provides a mock function with given fields: ctx, tx, badgeID
func (_m *BadgesStorer) DeleteBadge(ctx context.Context, tx repository.Transaction, badgeID int8) error {
	ret := _m.Called(ctx, tx, badgeID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBadge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, int8) error); ok {
		r0 = rf(ctx, tx, badgeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBadge provides a mock function with given fields: ctx, tx, badgeID
func (_m *BadgesStorer) GetBadge(ctx context.Context, tx repository.Transaction, badgeID int8) (repository.Badge, error) {
	ret := _m.Called(ctx, tx, badgeID)

	if len(ret) == 0 {
		panic("no return value specified for GetBadge")
	}

	var r0 repository.Badge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, int8) (repository.Badge, error)); ok {
		return rf(ctx, tx, badgeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, int8) repository.Badge); ok {
		r0 = rf(ctx, tx, badgeID)
	} else {
		r0 = ret.Get(0).(repository.Badge)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.Transaction, int8) error); ok {
		r1 = rf(ctx, tx, badgeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBadgeByName provides a mock function with given fields: ctx, tx, badgeName
func (_m *BadgesStorer) GetBadgeByName(ctx context.Context, tx repository.Transaction, badgeName string) int8 {
	ret := _m.Called(ctx, tx, badgeName)

	if len(ret) == 0 {
		panic("no return value specified for GetBadgeByName")
	}

	var r0 int8
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, string) int8); ok {
		r0 = rf(ctx, tx, badgeName)
	} else {
		r0 = ret.Get(0).(int8)
	}

	return r0
}

// GetBadgeByRewardPoints provides a mock function with given fields: ctx, tx, badgeRewardPoints
func (_m *BadgesStorer) GetBadgeByRewardPoints(ctx context.Context, tx repository.Transaction, badgeRewardPoints int16) int8 {
	ret := _m.Called(ctx, tx, badgeRewardPoints)

	if len(ret) == 0 {
		panic("no return value specified for GetBadgeByRewardPoints")
	}

	var r0 int8
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, int16) int8); ok {
		r0 = rf(ctx, tx, badgeRewardPoints)
	} else {
		r0 = ret.Get(0).(int8)
	}

	return r0
}

// IsBadgeNameExists provides a mock function with given fields: ctx, tx, badgeName
func (_m *BadgesStorer) IsBadgeNameExists(ctx context.Context, tx repository.Transaction, badgeName string) (bool, error) {
	ret := _m.Called(ctx, tx, badgeName)

	if len(ret) == 0 {
		panic("no return value specified for IsBadgeNameExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, string) (bool, error)); ok {
		return rf(ctx, tx, badgeName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, string) bool); ok {
		r0 = rf(ctx, tx, badgeName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.Transaction, string) error); ok {
		r1 = rf(ctx, tx, badgeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsBadgeRewardPointsExists provides a mock function with given fields: ctx, tx, rewardPoints
func (_m *BadgesStorer) IsBadgeRewardPointsExists(ctx context.Context, tx repository.Transaction, rewardPoints int16) (bool, error) {
	ret := _m.Called(ctx, tx, rewardPoints)

	if len(ret) == 0 {
		panic("no return value specified for IsBadgeRewardPointsExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, int16) (bool, error)); ok {
		return rf(ctx, tx, rewardPoints)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, int16) bool); ok {
		r0 = rf(ctx, tx, rewardPoints)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.Transaction, int16) error); ok {
		r1 = rf(ctx, tx, rewardPoints)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBadges provides a mock function with given fields: ctx, tx
func (_m *BadgesStorer) ListBadges(ctx context.Context, tx repository.Transaction) ([]repository.Badge, error) {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for ListBadges")
	}

	var r0 []repository.Badge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction) ([]repository.Badge, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction) []repository.Badge); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Badge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.Transaction) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBadge provides a mock function with given fields: ctx, tx, badgeUpdateInfo
func (_m *BadgesStorer) UpdateBadge(ctx context.Context, tx repository.Transaction, badgeUpdateInfo dto.Badge) (repository.Badge, error) {
	ret := _m.Called(ctx, tx, badgeUpdateInfo)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBadge")
	}

	var r0 repository.Badge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, dto.Badge) (repository.Badge, error)); ok {
		return rf(ctx, tx, badgeUpdateInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, dto.Badge) repository.Badge); ok {
		r0 = rf(ctx, tx, badgeUpdateInfo)
	} else {
		r0 = ret.Get(0).(repository.Badge)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.Transaction, dto.Badge) error); ok {
		r1 = rf(ctx, tx, badgeUpdateInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBadgesStorer creates a new instance of BadgesStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBadgesStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *BadgesStorer {
	mock := &BadgesStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
