// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/joshsoftware/peerly-backend/internal/pkg/dto"
	repository "github.com/joshsoftware/peerly-backend/internal/repository"
	mock "github.com/stretchr/testify/mock"
)

// OrganizationConfigStorer is an autogenerated mock type for the OrganizationConfigStorer type
type OrganizationConfigStorer struct {
	mock.Mock
}

// CreateOrganizationConfig provides a mock function with given fields: ctx, tx, org
func (_m *OrganizationConfigStorer) CreateOrganizationConfig(ctx context.Context, tx repository.Transaction, org dto.OrganizationConfig) (repository.OrganizationConfig, error) {
	ret := _m.Called(ctx, tx, org)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationConfig")
	}

	var r0 repository.OrganizationConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, dto.OrganizationConfig) (repository.OrganizationConfig, error)); ok {
		return rf(ctx, tx, org)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, dto.OrganizationConfig) repository.OrganizationConfig); ok {
		r0 = rf(ctx, tx, org)
	} else {
		r0 = ret.Get(0).(repository.OrganizationConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.Transaction, dto.OrganizationConfig) error); ok {
		r1 = rf(ctx, tx, org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationConfig provides a mock function with given fields: ctx, tx
func (_m *OrganizationConfigStorer) GetOrganizationConfig(ctx context.Context, tx repository.Transaction) (repository.OrganizationConfig, error) {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationConfig")
	}

	var r0 repository.OrganizationConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction) (repository.OrganizationConfig, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction) repository.OrganizationConfig); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Get(0).(repository.OrganizationConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.Transaction) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganizationConfig provides a mock function with given fields: ctx, tx, reqOrganization
func (_m *OrganizationConfigStorer) UpdateOrganizationConfig(ctx context.Context, tx repository.Transaction, reqOrganization dto.OrganizationConfig) (repository.OrganizationConfig, error) {
	ret := _m.Called(ctx, tx, reqOrganization)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationConfig")
	}

	var r0 repository.OrganizationConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, dto.OrganizationConfig) (repository.OrganizationConfig, error)); ok {
		return rf(ctx, tx, reqOrganization)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, dto.OrganizationConfig) repository.OrganizationConfig); ok {
		r0 = rf(ctx, tx, reqOrganization)
	} else {
		r0 = ret.Get(0).(repository.OrganizationConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.Transaction, dto.OrganizationConfig) error); ok {
		r1 = rf(ctx, tx, reqOrganization)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrganizationConfigStorer creates a new instance of OrganizationConfigStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrganizationConfigStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrganizationConfigStorer {
	mock := &OrganizationConfigStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
