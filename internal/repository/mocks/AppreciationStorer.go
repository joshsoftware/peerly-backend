// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import dto "github.com/joshsoftware/peerly-backend/internal/pkg/dto"
import mock "github.com/stretchr/testify/mock"
import repository "github.com/joshsoftware/peerly-backend/internal/repository"
import sqlx "github.com/jmoiron/sqlx"

// AppreciationStorer is an autogenerated mock type for the AppreciationStorer type
type AppreciationStorer struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields: ctx
func (_m *AppreciationStorer) BeginTx(ctx context.Context) (repository.Transaction, error) {
	ret := _m.Called(ctx)

	var r0 repository.Transaction
	if rf, ok := ret.Get(0).(func(context.Context) repository.Transaction); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAppreciation provides a mock function with given fields: ctx, tx, appreciation
func (_m *AppreciationStorer) CreateAppreciation(ctx context.Context, tx repository.Transaction, appreciation dto.Appreciation) (repository.Appreciation, error) {
	ret := _m.Called(ctx, tx, appreciation)

	var r0 repository.Appreciation
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, dto.Appreciation) repository.Appreciation); ok {
		r0 = rf(ctx, tx, appreciation)
	} else {
		r0 = ret.Get(0).(repository.Appreciation)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repository.Transaction, dto.Appreciation) error); ok {
		r1 = rf(ctx, tx, appreciation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppreciation provides a mock function with given fields: ctx, tx, apprId
func (_m *AppreciationStorer) DeleteAppreciation(ctx context.Context, tx repository.Transaction, apprId int32) error {
	ret := _m.Called(ctx, tx, apprId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, int32) error); ok {
		r0 = rf(ctx, tx, apprId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAppreciationById provides a mock function with given fields: ctx, tx, appreciationId
func (_m *AppreciationStorer) GetAppreciationById(ctx context.Context, tx repository.Transaction, appreciationId int32) (repository.AppreciationResponse, error) {
	ret := _m.Called(ctx, tx, appreciationId)

	var r0 repository.AppreciationResponse
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, int32) repository.AppreciationResponse); ok {
		r0 = rf(ctx, tx, appreciationId)
	} else {
		r0 = ret.Get(0).(repository.AppreciationResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repository.Transaction, int32) error); ok {
		r1 = rf(ctx, tx, appreciationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleTransaction provides a mock function with given fields: ctx, tx, isSuccess
func (_m *AppreciationStorer) HandleTransaction(ctx context.Context, tx repository.Transaction, isSuccess bool) error {
	ret := _m.Called(ctx, tx, isSuccess)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, bool) error); ok {
		r0 = rf(ctx, tx, isSuccess)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitiateQueryExecutor provides a mock function with given fields: tx
func (_m *AppreciationStorer) InitiateQueryExecutor(tx repository.Transaction) sqlx.Ext {
	ret := _m.Called(tx)

	var r0 sqlx.Ext
	if rf, ok := ret.Get(0).(func(repository.Transaction) sqlx.Ext); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sqlx.Ext)
		}
	}

	return r0
}

// IsUserPresent provides a mock function with given fields: ctx, tx, userID
func (_m *AppreciationStorer) IsUserPresent(ctx context.Context, tx repository.Transaction, userID int64) (bool, error) {
	ret := _m.Called(ctx, tx, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, int64) bool); ok {
		r0 = rf(ctx, tx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repository.Transaction, int64) error); ok {
		r1 = rf(ctx, tx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppreciations provides a mock function with given fields: ctx, tx, filter
func (_m *AppreciationStorer) ListAppreciations(ctx context.Context, tx repository.Transaction, filter dto.AppreciationFilter) ([]repository.AppreciationResponse, repository.Pagination, error) {
	ret := _m.Called(ctx, tx, filter)

	var r0 []repository.AppreciationResponse
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, dto.AppreciationFilter) []repository.AppreciationResponse); ok {
		r0 = rf(ctx, tx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.AppreciationResponse)
		}
	}

	var r1 repository.Pagination
	if rf, ok := ret.Get(1).(func(context.Context, repository.Transaction, dto.AppreciationFilter) repository.Pagination); ok {
		r1 = rf(ctx, tx, filter)
	} else {
		r1 = ret.Get(1).(repository.Pagination)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, repository.Transaction, dto.AppreciationFilter) error); ok {
		r2 = rf(ctx, tx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateAppreciationTotalRewardsOfYesterday provides a mock function with given fields: ctx, tx
func (_m *AppreciationStorer) UpdateAppreciationTotalRewardsOfYesterday(ctx context.Context, tx repository.Transaction) (bool, error) {
	ret := _m.Called(ctx, tx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction) bool); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repository.Transaction) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserBadgesBasedOnTotalRewards provides a mock function with given fields: ctx, tx
func (_m *AppreciationStorer) UpdateUserBadgesBasedOnTotalRewards(ctx context.Context, tx repository.Transaction) ([]repository.UserBadgeDetails, error) {
	ret := _m.Called(ctx, tx)

	var r0 []repository.UserBadgeDetails
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction) []repository.UserBadgeDetails); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.UserBadgeDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repository.Transaction) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func NewAppreciationStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppreciationStorer {
	mock := &AppreciationStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
