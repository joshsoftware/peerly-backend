// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import dto "github.com/joshsoftware/peerly-backend/internal/pkg/dto"
import mock "github.com/stretchr/testify/mock"
import repository "github.com/joshsoftware/peerly-backend/internal/repository"
import sqlx "github.com/jmoiron/sqlx"

// UserStorer is an autogenerated mock type for the UserStorer type
type UserStorer struct {
	mock.Mock
}

// AddDeviceToken provides a mock function with given fields: ctx, userID, deviceToken
func (_m *UserStorer) AddDeviceToken(ctx context.Context, userID int64, deviceToken string) error {
	ret := _m.Called(ctx, userID, deviceToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, userID, deviceToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeginTx provides a mock function with given fields: ctx
func (_m *UserStorer) BeginTx(ctx context.Context) (repository.Transaction, error) {
	ret := _m.Called(ctx)

	var r0 repository.Transaction
	if rf, ok := ret.Get(0).(func(context.Context) repository.Transaction); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNewUser provides a mock function with given fields: ctx, user
func (_m *UserStorer) CreateNewUser(ctx context.Context, user dto.User) (repository.User, error) {
	ret := _m.Called(ctx, user)

	var r0 repository.User
	if rf, ok := ret.Get(0).(func(context.Context, dto.User) repository.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(repository.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveUserList provides a mock function with given fields: ctx, tx
func (_m *UserStorer) GetActiveUserList(ctx context.Context, tx repository.Transaction) ([]repository.ActiveUser, error) {
	ret := _m.Called(ctx, tx)

	var r0 []repository.ActiveUser
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction) []repository.ActiveUser); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.ActiveUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repository.Transaction) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdmin provides a mock function with given fields: ctx, email
func (_m *UserStorer) GetAdmin(ctx context.Context, email string) (repository.User, error) {
	ret := _m.Called(ctx, email)

	var r0 repository.User
	if rf, ok := ret.Get(0).(func(context.Context, string) repository.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(repository.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGradeById provides a mock function with given fields: ctx, id
func (_m *UserStorer) GetGradeById(ctx context.Context, id int64) (repository.Grade, error) {
	ret := _m.Called(ctx, id)

	var r0 repository.Grade
	if rf, ok := ret.Get(0).(func(context.Context, int64) repository.Grade); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(repository.Grade)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGradeByName provides a mock function with given fields: ctx, name
func (_m *UserStorer) GetGradeByName(ctx context.Context, name string) (repository.Grade, error) {
	ret := _m.Called(ctx, name)

	var r0 repository.Grade
	if rf, ok := ret.Get(0).(func(context.Context, string) repository.Grade); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(repository.Grade)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRewardMultiplier provides a mock function with given fields: ctx
func (_m *UserStorer) GetRewardMultiplier(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoleByName provides a mock function with given fields: ctx, name
func (_m *UserStorer) GetRoleByName(ctx context.Context, name string) (int64, error) {
	ret := _m.Called(ctx, name)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTop10Users provides a mock function with given fields: ctx, quarterTimestamp
func (_m *UserStorer) GetTop10Users(ctx context.Context, quarterTimestamp int64) ([]repository.Top10Users, error) {
	ret := _m.Called(ctx, quarterTimestamp)

	var r0 []repository.Top10Users
	if rf, ok := ret.Get(0).(func(context.Context, int64) []repository.Top10Users); ok {
		r0 = rf(ctx, quarterTimestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Top10Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, quarterTimestamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserStorer) GetUserByEmail(ctx context.Context, email string) (repository.User, error) {
	ret := _m.Called(ctx, email)

	var r0 repository.User
	if rf, ok := ret.Get(0).(func(context.Context, string) repository.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(repository.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: ctx, reqData
func (_m *UserStorer) GetUserById(ctx context.Context, reqData dto.GetUserByIdReq) (dto.GetUserByIdResp, error) {
	ret := _m.Called(ctx, reqData)

	var r0 dto.GetUserByIdResp
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetUserByIdReq) dto.GetUserByIdResp); ok {
		r0 = rf(ctx, reqData)
	} else {
		r0 = ret.Get(0).(dto.GetUserByIdResp)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.GetUserByIdReq) error); ok {
		r1 = rf(ctx, reqData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleTransaction provides a mock function with given fields: ctx, tx, isSuccess
func (_m *UserStorer) HandleTransaction(ctx context.Context, tx repository.Transaction, isSuccess bool) error {
	ret := _m.Called(ctx, tx, isSuccess)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, bool) error); ok {
		r0 = rf(ctx, tx, isSuccess)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitiateQueryExecutor provides a mock function with given fields: tx
func (_m *UserStorer) InitiateQueryExecutor(tx repository.Transaction) sqlx.Ext {
	ret := _m.Called(tx)

	var r0 sqlx.Ext
	if rf, ok := ret.Get(0).(func(repository.Transaction) sqlx.Ext); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sqlx.Ext)
		}
	}

	return r0
}

// ListDeviceTokensByUserID provides a mock function with given fields: ctx, userID
func (_m *UserStorer) ListDeviceTokensByUserID(ctx context.Context, userID int64) ([]string, error) {
	ret := _m.Called(ctx, userID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, int64) []string); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: ctx, reqData
func (_m *UserStorer) ListUsers(ctx context.Context, reqData dto.ListUsersReq) ([]repository.User, int64, error) {
	ret := _m.Called(ctx, reqData)

	var r0 []repository.User
	if rf, ok := ret.Get(0).(func(context.Context, dto.ListUsersReq) []repository.User); ok {
		r0 = rf(ctx, reqData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.User)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, dto.ListUsersReq) int64); ok {
		r1 = rf(ctx, reqData)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, dto.ListUsersReq) error); ok {
		r2 = rf(ctx, reqData)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SyncData provides a mock function with given fields: ctx, updateData
func (_m *UserStorer) SyncData(ctx context.Context, updateData dto.User) error {
	ret := _m.Called(ctx, updateData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.User) error); ok {
		r0 = rf(ctx, updateData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRewardQuota provides a mock function with given fields: ctx, tx
func (_m *UserStorer) UpdateRewardQuota(ctx context.Context, tx repository.Transaction) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func NewUserStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserStorer {
	mock := &UserStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

